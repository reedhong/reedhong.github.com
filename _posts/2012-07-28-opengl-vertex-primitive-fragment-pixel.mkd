---
title: OpenGL中的顶点，图元，片段和像素
category: OpenGL
tags:
 - style
 - guideline
layout: post
---

上次写过一篇[OpenGL中的顶点](/blog/2012/07/14/open-vertex/), 意犹未尽，本篇想把这几个概念放在一块儿聊聊。通过最近的学习，我发现理解这几个基本名词已经它们之间的转换关系是理解OpenGL运作机理的关键，特别是所谓的[渲染管线](http://en.wikipedia.org/wiki/Graphics_pipeline).

有图有真相，我们先看一张图：  
![形象化OpenGL管线](http://xiaohong.me/images/blog/pipeline-transfer.jpg)   
网上和各种教科书上存在各种渲染管线的图，这张图算是最形象，最能说明问题的。OpenGL处理过程就是一个顶点(Vertex)-->图元(Primitive)-->片段（Fragment)-->像素(Pixel)的过程。

#1. 顶点(Vertex)-->图元(Primitive)#
此过程的专业术语:**图元装配(Primitive Assembly)**。  
如上图，就是把顶点变成指定的基本图元(点，线，面)。需要指出的是，此处输入的顶点，是经过一系列视图变换之后的顶点。动态渲染管线中这种变换是通过Vertex Shader实现的。此处还有一个主要任务就是裁减。比如3维不可见面裁减掉，应用程序指定裁减面，需要干掉不在里面的。被投影矩阵给裁减掉等。

#2. 图元(Primitive)-->片段(Fragment)#
此过程的专业术语:**光栅化(Rasterization)**。    
前面的图元还只是一个几何概念(比如：三个顶点确定一个三角形)。但我们最终需要在屏幕上把其绘制出来，就需要转化为屏幕上的一个个点。但此时还不是真正的像素点，称之为片段。它是一种中间状态，拥有像素的所有相关属性，有可能被更新到一个像素上。由上面的图可以看出，顶点和片段不是一一对应的，一个被填充的三角形有三个顶点就可以描述，但需要大量的片段才能组合成。但如何从3个顶点变成一系列的片段呢？这个就要用到我们在学习图形学理论中经常要提及的各种**插值算法**。这里的插值不仅仅是坐标，还有颜色，纹理坐标等。

#3. 片段(Fragment)-->像素(Pixel)#
此过程的专业属于:**片段操作(Per-Fragment Operationes)**。  
在讨论之前先谈谈片段存在的意义。比如我们绘制两个人一前一后地站着，那么我们投影在屏幕上谁应该被遮挡呢?最简单的可以理解为先绘制的被遮挡。这个在2D游戏里面经常这样简单处理。但在3D里面怎么办？我们的镜头是可以移动的，人也是各种变动的。总是要去维护这种关系就非常难。我们就通过一些测试来搞定这些事情。测试通过的片段就将成替代原有的像素成为新的像素(当然，我们不只有简单的替代操作)。所有片段这种中间状态的存在就非常有意义了。片段操作就是一系列的测试，这些测试最终影响一个片段所处位置的像素属性。二者进行各种复杂的操作最终实现我们想要的效果。具体片段操作和测试可以见红宝书第10章。

最后在来一张更详细的图说明整个过程
![形象化OpenGL管线](http://xiaohong.me/images/blog/pipeline.png)  









