---
title: Ogre分析之插件机制  
category: Ogre
tags:
 - ogre
 - plugin
 - source
layout: post
---

Ogre有良好的插件系统，能够方便地系统更换或添加一些功能组件。通过配置文件去驱动插件的加载，非常灵活。这种设计非常值得我们学习。为此深入地考察了一番Ogre插件系统的设计。

####1. 先看Plugin继承体系：####
![ogre plugin](/images/blog/ogre-plugin.jpg)  
Plugin本身为一抽象类，定义了作为一个Plugin应该具备的一些基本接口

>class Plugin
{  
public:  
Plugin(){}  
~Plugin(){}  
virtual const String& getName() const = 0;   
virtual void install() = 0;  
virtual void initialise() = 0;  
virtual void shutdown() = 0;  
virtual void uninstall() = 0;  `  
};  

所有继承Plugin的类实现这些接口。我们来看GLPlugin一些接口的实现  
> void GLPlugin::install()  
     {
          mRenderSystem = new GLRenderSystem();   
          // 加到Root的renders中  
          Root::getSingleton().addRenderSystem(mRenderSystem);  
     }

     void GLPlugin::uninstall()
     {
          delete mRenderSystem;
          mRenderSystem = 0;
     }

####2. 再看动态库的管理，重点看类:DynLib和DynLibManager####
DynLib封装了不同平台上动态库的操作，提供一致性的接口。可以理解为一种Adapter的设计模式。重点可以看其load和unload接口的实现，这里就不错具体的分析。  
DynLibManager把系统涉及到的所有DnyLib，通过一个Map管理起来。  
  
  
  
####3. Root涉及插件加载的接口**####
>// 通过dll，加载插件，此处其实是加载动态库，这个地方的命名有些问题。  
void loadPlugin(const String& pluginName)  
{
  DynLib* lib = DynLibManager::getSingleton().load( pluginName );  
  DLL_START_PLUGIN pFunc = (DLL_START_PLUGIN)lib->getSymbol("dllStartPlugin");  
  pFunc();  // 调用dll中的dllStartPlugin接口实现插件的安装  
}

// 通过dll，卸载插件  
void unloadPlugin(const String& pluginName);  
{  
  // Call plugin shutdown    
  DLL_STOP_PLUGIN pFunc = (DLL_STOP_PLUGIN)(*i)->getSymbol("dllStopPlugin");  
  // this must call uninstallPlugin  
  pFunc();  
  // Unload library (destroyed by DynLibManager)  
  DynLibManager::getSingleton().unload(*i);  
  mPluginLibs.erase(i);   
}  

// 安装和卸载插件  
void installPlugin(Plugin* plugin)  
{
  // 加入到插件列表  
  mPlugins.push_back(plugin);  
  // 安装  
  plugin->install();  

  // if rendersystem is already initialised, call rendersystem init too  
  // 初始化  
  if (mIsInitialised)
  {    
     plugin->initialise();  
  }
 
}

void uninstallPlugin(Plugin* plugin);  
{  
  if (mIsInitialised)  
    plugin->shutdown();  
  plugin->uninstall();  
  mPlugins.erase(i);  
}  


####4. 然后看动态库的定义文件####
挑选RenderSystems/GL/src/OgreGLEngineDll.cpp文件分析：
>    extern "C" void _OgreGLExport dllStartPlugin(void) throw()  
    {  
          plugin = new GLPlugin();  
          Root::getSingleton().installPlugin(plugin);

    }

    extern "C" void _OgreGLExport dllStopPlugin(void)
    {
          Root::getSingleton().uninstallPlugin(plugin);
          delete plugin;
    }


可以看出，也就是动态创建插件，然后调用Root的接口安装和卸载相应的接口
根据上面的分析，我们在看动态库加载和静态库加载的全过程：
####1. 动态库加载####
主要是通过读入plugins.cfg的配置文件，依次加载进来

>Root::Root()
{
 ...
 // Load plugins
if (!pluginFileName.empty())  
  loadPlugins(pluginFileName);{  
    // 1. 解析plugin配置文件(plugin.cfg)  
    // 2. 依次加载插件  
   for( StringVector::iterator it = pluginList.begin(); it != pluginList.end(); ++it )  
   {  
     loadPlugin(pluginDir + (*it));{  
       
     }  
   }  
  }  
 ...
}

####2.静态库的加载####
在编译前需要修改编译参数，编译参数的修改在Ogre\include\OgreBuildSettings.h中，将#define OGRE_STATIC_LIB 打开。然后手动通过Root的installPlugin接口加载。我们可以看源码Samples\Browser\Android\project\jni\ogrewrapper.cpp中的代码
>     // Create a root object
          g_root = OGRE_NEW Ogre::Root("", "", "");
          
          // Register the ES2 plugin
          g_gles2Plugin = OGRE_NEW Ogre::GLES2Plugin();
          Ogre::Root::getSingleton().installPlugin(g_gles2Plugin);
          
          // Register particle plugin
          g_pfxPlugin = OGRE_NEW Ogre::ParticleFXPlugin();
          Ogre::Root::getSingleton().installPlugin(g_pfxPlugin);

通过上述方法即可。